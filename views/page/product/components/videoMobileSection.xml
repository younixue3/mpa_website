<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="video_mobile_product_section" name="Video Mobile Product Section">
        <section class="w-full h-screen md:hidden flex video-mobile-section-trigger overflow-hidden">
            <canvas class="h-screen w-full video-mobile-section" id="product-animation-canvas" />
            <div class="absolute w-full h-full flex relative">
                <div id="stone-510mm" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu 5-10 mm</h3>
                    <p class="text-lg w-[90vw]">Batu ukuran 5–10 mm, atau sering disebut batu screening, merupakan hasil pemrosesan mesin pemecah batu dengan ukuran seragam dan presisi tinggi. Material ini biasa digunakan sebagai campuran utama dalam pembuatan aspal hotmix serta penebalan struktur jalan pada proses Asphalt Mixing Plant (AMP).</p>
                </div>
                <div id="stone-1020mm" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu 10-20 mm</h3>
                    <p class="text-lg w-[90vw]">Batu ukuran 10–20 mm merupakan material favorit dalam dunia konstruksi. Ukurannya yang seragam dengan daya tahan tinggi menjadikannya pilihan utama untuk pengecoran struktur ringan hingga berat.</p>
                </div>
                <div id="stone-2030mm" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu 20-30 mm</h3>
                    <p class="text-lg w-[90vw]">Batu ukuran 20–30 mm merupakan material andalan untuk berbagai kebutuhan konstruksi, khususnya pada pengecoran beton horizontal seperti lantai kerja dan struktur dasar. Ukurannya yang ideal memberikan kepadatan dan daya ikat optimal dalam campuran beton.</p>
                </div>
                <div id="stone-3050mm" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu 30-50 mm</h3>
                    <p class="text-lg w-[90vw]">Batu ukuran 30-50 mm memiliki ukuran ideal untuk kebutuhan konstruksi dengan beban tinggi. Umumnya digunakan sebagai lapisan dasar badan jalan, penyangga bantalan rel kereta, hingga pemberat pipa di dasar laut atau proyek bawah permukaan lainnya.</p>
                </div>
                <div id="stone-5070mm" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu 50-70 mm</h3>
                    <p class="text-lg w-[90vw]">Batu ukuran 50–70 mm digunakan pada bagian struktur paling bawah dalam proyek infrastruktur besar. Material ini memberikan kestabilan tinggi dan ruang antar butiran yang ideal untuk drainase.</p>
                </div>
                <div id="stone-foundation" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu Pondasi (20-30 cm)</h3>
                    <p class="text-lg w-[90vw]">Batu pondasi berukuran 20–30 cm banyak digunakan untuk konstruksi bangunan seperti rumah, ruko, pabrik, hingga bangunan bertingkat. Ukurannya yang besar membuat batu ini memiliki kemampuan menahan beban struktur di atasnya secara optimal.</p>
                </div>
                <div id="stone-boulder" class="absolute w-full top-32 right-[22rem] text-center text-white transform opacity-0 transition-all ease-in-out duration-500">
                    <h3 class="text-3xl font-bold text-nowrap w-[90vw]">Batu Bolder (30 cm up)</h3>
                    <p class="text-lg w-[90vw]">Batu bolder berukuran lebih dari 30 cm merupakan material utama dalam proyek-proyek reklamasi, tanggul sungai, dan perlindungan pantai. Bobot dan ukurannya sangat efektif untuk menahan arus air, ombak, maupun longsoran tanah.</p>
                </div>
            </div>
        </section>

        <script type="text/javascript">
            document.addEventListener("DOMContentLoaded", () => {
                gsap.registerPlugin(ScrollTrigger);

                const productCanvas = document.getElementById("product-animation-canvas");
                const canvasCtx = productCanvas.getContext("2d");

                const updateCanvasSize = () => {
                    productCanvas.width = window.innerWidth;
                    productCanvas.height = window.innerHeight;
                };
                updateCanvasSize();
                window.addEventListener('resize', updateCanvasSize);

                const totalFrames = 1049;
                const frameImages = new Array(totalFrames);
                let currentLoadedFrame = 0;

                // Modified image loading strategy
                function loadImage(index) {
                    return new Promise((resolve) => {
                        const img = new Image();
                        img.onload = () => {
                            frameImages[index] = img;
                            currentLoadedFrame++;
                            resolve();
                        };
                        img.src = `/mpa_website/static/src/video/produk-video-mobile-sequence/frame_${(index + 1).toString().padStart(5, '0')}.jpg`;
                    });
                }

                // Load images in batches
                const batchSize = 50;
                async function loadImageBatch(startIdx) {
                    const endIdx = Math.min(startIdx + batchSize, totalFrames);
                    const promises = [];
                    
                    for (let i = startIdx; i &lt; endIdx; i++) {
                        promises.push(loadImage(i));
                    }
                    
                    await Promise.all(promises);
                    
                    if (endIdx &lt; totalFrames) {
                        setTimeout(() => loadImageBatch(endIdx), 100);
                    }
                }

                // Start loading first batch
                loadImageBatch(0);

                const videoState = {
                    currentFrame: 0,
                    lastRenderedFrame: -1
                };

                gsap.to(videoState, {
                    currentFrame: totalFrames - 1,
                    snap: 1,
                    ease: "none",
                    scrollTrigger: {
                        trigger: ".video-mobile-section-trigger",
                        scrub: true,
                        pin: true,
                        pinSpacing: true,
                        start: "top top",
                        end: "+=2000%",
                        anticipatePin: 1,
                        onUpdate: (self) => {
                            videoState.currentFrame = Math.floor(self.progress * (totalFrames - 1));
                            requestAnimationFrame(renderFrame);
                        }
                    }
                });

                function renderFrame() {
                    const frameToRender = Math.floor(videoState.currentFrame);
                    
                    if (frameToRender === videoState.lastRenderedFrame || !frameImages[frameToRender]) {
                        return;
                    }

                    videoState.lastRenderedFrame = frameToRender;
                    
                    canvasCtx.clearRect(0, 0, productCanvas.width, productCanvas.height);
                    
                    const currentImg = frameImages[frameToRender];
                    const scaleRatio = Math.max(
                        productCanvas.width / currentImg.width,
                        productCanvas.height / currentImg.height
                    );
                    
                    const xOffset = (productCanvas.width - currentImg.width * scaleRatio) / 2;
                    const yOffset = (productCanvas.height - currentImg.height * scaleRatio) / 2;
                    
                    canvasCtx.drawImage(
                        currentImg,
                        xOffset, yOffset,
                        currentImg.width * scaleRatio,
                        currentImg.height * scaleRatio
                    );

                    // Stone elements animation remains unchanged
                    const stoneElements = [
                        { element: document.getElementById('stone-510mm'), timing: [60, 160] },
                        { element: document.getElementById('stone-1020mm'), timing: [210, 310] },
                        { element: document.getElementById('stone-2030mm'), timing: [360, 460] },
                        { element: document.getElementById('stone-3050mm'), timing: [510, 610] },
                        { element: document.getElementById('stone-5070mm'), timing: [660, 760] },
                        { element: document.getElementById('stone-foundation'), timing: [810, 910] },
                        { element: document.getElementById('stone-boulder'), timing: [960, 1010] }
                    ];

                    stoneElements.forEach(({element, timing}) => {
                        if (element) {
                            const [appearFrame, disappearFrame] = timing;
                            if (frameToRender &gt;= appearFrame &amp;&amp; frameToRender &lt; disappearFrame) {
                                element.classList.remove('opacity-0');
                                element.classList.add('opacity-100');
                            } else {
                                element.classList.remove('opacity-100');
                                element.classList.add('opacity-0');
                            }
                        }
                    });
                }

                // Initial render
                renderFrame();
            });
        </script>
    </template>
</odoo>